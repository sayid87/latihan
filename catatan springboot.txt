1. Download dan install 
-JDK di https://www.oracle.com/java/technologies/downloads/?er=221886 setelah itu, ketik di cmd 
	java -version  
	bila keluar angka versinya, maka sudah berhasil terinstall
-Maven di https://maven.apache.org/download.cgi. lalu extract di drive C, lalu set env system windows ke folder bin -nya. lalu ketik di cmd
	mvn -v
	bila keluar angka versinya, maka sudah berhasil terinstall
2. Extension VS Code:
-extension pack for java
-Spring Boot Extension Pack	   

3. pembuatan proyek:
-pergi ke start.spring.io
-pilih maven
-ketik nama group misalnya com.belajar, artifactnya belajar, lalu sesuaikan dengan versi JDK yang terinstall, misalnya 23
-tambahkan dependencies:
	+ Spring Web (buat bikin REST API)
	+ Spring Security (buat auth seperti sanctum laravel)
	+ Spring Data JPA (ORM buat Spring, seperti Eloquent di Laravel)
	+ Lombok (buat generate anotasi tipe seperti @Setter dan @Getter,dsb)
	+ MySQL Driver (untuk konek ke mysql)
	+ Validator (untuk validasi input seperti required,email,numeric,dsb)
-lalu generate, nanti akan download.
-buka di vscode, lalu tunggu smuanya terdownload otomatis

4.starting proyek:
-buka file application.properties pada folder resource lalu masukkan koding ini:
spring.application.name=belajar
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=
spring.datasource.url=jdbc:mysql://localhost:3306/belajarspringboot?useSSL=false&serverTimezone=UTC
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.maximum-pool-size=20

//dimana belajarspringboot adalah nama databasenya

-di folder java/com/belajar/belajar, klik kanan pilih "new java package" lalu namakan controllers (jadinya belajar.belajar.controllers)
-lalu dalam folder tersebut klik kanan lalu pilih "new java file" > class. kasih nama misalnya TestController. lalu isi koding seperti ini
@RestController
public class TestController {
    @GetMapping("/test")
    public void getTest() {
        // return new String();
        System.out.println("Halo"); //buat munculin diterminal, berguna untuk debuging
    }
    
}

untuk menjalankannya, ke file BelajarApplication.java, klik run main. perlu diingat, tidak ada hot reload, jadi setiap ada perubahan koding, harus restart server
akses rutenya adalah /test, nanti akan muncul di terminal "Halo"

-lalu buat "new java package" di dalam folder java/com/belajar/belajar Namanya "config" lalu di dalam buat "new java file" > class dengan nama SecurityConfig
lalu isi dengan koding seperti ini
@Configuration
public class SecurityConfig {
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf().disable();
        http.headers().frameOptions().disable();
        http.authorizeHttpRequests().anyRequest().permitAll();
        return http.build();
    }
}

//gunanya untuk bypass error 401 dan csrf di awal proyek 

-lalu buat "new java package" di dalam folder java/com/belajar/belajar Namanya "models" lalu didalamnya buat "new java file" > class dengan nama WebResponse, yang isi kodingnya seperti ini:
@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class WebResponse<D> { //<D> agar bisa terima tipe data apapun, dan boleh bebas, harus D, tapi huruf besar
    private D data;
    private String message;

}

//berguna buat handle response untuk jadi json. 

lalu di test controller, ubah kodingnya jadi seperti ini:
public WebResponse<List<String>> getTest() { //ganti dari void jadi interface WebResponse
        // return new String();
        System.out.println("Halo");
        
       return WebResponse.<String>builder().data("Halo").message("Test JSON").build(); //nanti akan jadi {data:"Halo",message:"Test JSON"}
}

-untuk bikin array object yang isinya data (pakai DB ataupun tidak), buat "new java package" di dalam folder java/com/belajar/belajar Namanya "entities"
yang di dalamnya adalah "new java file" > class Bernama (misalnya) Karyawan dengan isi seperti ini
@Setter
@Getter
@NoArgsConstructor
@AllArgsConstructor
public class Karyawan {
    private int idKaryawan;
    private String namaKaryawan;
    private boolean  isAktif;
}

-lalu buat rute baru di TestController dengan koding seperti ini:
 @GetMapping("/karyawan")
    public WebResponse<Object> getKaryawan(@RequestParam(required=false) String id, @RequestParam(required=false) String nama) {//bisa (tidak harus) ?id=1&nama=Budi
        List<Karyawan> dataKaryawan = new ArrayList<Karyawan>(); 
        dataKaryawan.add(new Karyawan(1, "Andi", true));
        dataKaryawan.add(new Karyawan(2, "Joko", false));
        return WebResponse.builder().data(dataKaryawan).message("ID:"+id+" dan Nama:"+nama).sukses(1).build();
    }

-------------------------------------------------------
untuk koneksi ke database:
-buat "new java file" > class Bernama Users (sesuaikan dengan table terkait)

@Setter
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Entity //memberitahu klo file ini akan konek ke database
@Table(name = "users") //maksudnya untuk handle table users
public class User {
    @Id
    @Column(name = "id_user") //ngasih tau klo primary ke yg dihandle adalah id_user
    private int idUser;

    private String nama;
    private String email;
    private String password;
    private String telp;
    private String foto;
}

-buat "new java package" Bernama repositories, gunanya untuk handle insert,update,delete,dan select pada database. lalu buat "new java file" > interface. lalu isi koding seperti ini
@Repository
public interface UserRepository extends JpaRepository<User, Integer> {
    User findByEmail(String email); //custom query
}

-untuk menghandle request (post dan put), buat "new java pacgake" dengan nama requests, dan buat "new java file" > class dengan nama UserRequest. dengan isi koding seperti ini
public class UserRequest {
    @Setter
    @Getter
    @AllArgsConstructor
    @NoArgsConstructor
    private static class UserRequest {
        private String nama;
        private String email;
        private String password;
        private String ulangi;
        private String telp;
        private MultipartFile foto;
    }

    @Setter
    @Getter
    @AllArgsConstructor
    @NoArgsConstructor
    private static class UpdateUserRequest {
        private String nama;
        private String telp;
        private MultipartFile foto;
    }

    @Setter
    @Getter
    @AllArgsConstructor
    @NoArgsConstructor
    private static class LoginUserRequest {
        private String email;
        private String password;

    }
}
----------------------------------------------------------------------------------------------------------------------------
Security: login dan token
1. Buka file config/SecurityConfig.java, lalu ubah kodingnya seperti ini:
@Configuration
public class SecurityConfig {
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        // http.csrf().disable();
        // http.headers().frameOptions().disable();
        // http.authorizeHttpRequests().anyRequest().permitAll();
        // return http.build();

        http.csrf(customizer -> customizer.disable())
                .authorizeHttpRequests(request -> request
                        .requestMatchers("/login", "/register").permitAll().anyRequest().authenticated())
                .httpBasic(Customizer.withDefaults())
                .sessionManagement(session -> session
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS));

        return http.build();

    }

    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService()); // nanti kita bikin service lagi
        provider.setPasswordEncoder(new BCryptPasswordEncoder());
        return provider;
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}

2. buat "new java package" Bernama services lalu buat "new java file" > class Bernama "CustomUserDetailsService" yang berisi koding seperti ini:
public class CustomUserDetailsService implements UserDetailsService {
    @Autowired
    UserRepository uRep;

    @Override
    public UserDetails loadUserByUsername(String username) {
        uRep.findByEmail(username);
    }
}

3. lalu buat "new java file" > class Bernama "UserPrincipal" yang isi kodingnya seperti berikut
public class UserPrincipal implements UserDetails {

    private User user;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public String getPassword() {
        return user.getPassword();
    }

    @Override
    public String getUsername() {
        return user.getEmail();
    }

}

4.add package lewat maven jjwt-api, jjwt-impl, jjwt-jackson 
5. lalu di folder services, buat "new Java file" > class Bernama JWTService yang isinya seperti ini:
public class JWTService {
    private static final String secret = "rahasia";
    private String secretKey;

    public JWTService(String secretKey) {
        this.secretKey = secretKey;
    }

    public String generateSecretKey() {
        try {
            KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");
            SecretKey key = keyGen.generateKey();
            return Base64.getEncoder().encodeToString(key.getEncoded());
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    public String generateToken(String username) {
        Map<String, Object> claims = new HashMap<>();
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(username)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24))
                .signWith(getKey(), SignatureAlgorithm.HS256).compact();
    }

    private Key getKey() {
        byte[] secretKey = Decoders.BASE64.decode(secret);
        return Keys.hmacShaKeyFor(secretKey);
    }

    private <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        return Jwts.parser().setSigningKey(getKey()).build().parseClaimsJws(token).getBody();
    }

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public boolean validateToken(String token) {
        return extractAllClaims(token).getExpiration().after(new Date());
    }

    private Date extractExpiratioDate(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public boolean isTokenExpired(String token) {
        return extractExpiratioDate(token).before(new Date());
    }
}


6. pada folder Config, buat "new Java File" > class Bernama "JWTFilter" yang isinya
@Component
public class JWTFilter extends OncePerRequestFilter {
    @Autowired
    private JWTService jSvc;
    @Autowired
    private ApplicationContext context;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException, java.io.IOException {
        String authHeader = request.getHeader("Authorization");
        String token = null;
        String username = null;
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            token = authHeader.substring(7);
            username = jSvc.extractUsername(token);
        }

        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = context.getBean(CustomUserDetailsService.class).loadUserByUsername(username);

            if (jSvc.validateToken(token, userDetails)) {
                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                        userDetails, null, userDetails.getAuthorities());
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }

        filterChain.doFilter(request, response);
    }
}

7. pada file UserController.java, tambahkan koding ini:

